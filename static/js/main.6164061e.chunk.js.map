{"version":3,"sources":["components/Todo/Todo.js","props/TodoProps.js","props/ControllersProps.js","components/Controllers/Controllers.js","components/TodoList/TodoList.jsx","props/TodoListProps.js","api.js","props/CurrentUserProps.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["Todo","PropTypes","bool","string","isRequired","number","func","completed","title","userId","changeUserId","type","readOnly","checked","className","ClassNames","onClick","defaultProps","ControllersProps","selectValue","filterQuery","handleChange","Controllers","placeholder","name","value","onChange","TodoList","todos","arrayOf","shape","id","map","key","BASE_URL","getUser","fetch","then","response","json","data","CurrentUser","state","user","changeUser","a","props","setState","console","warn","this","prevProps","resetUserId","email","phone","React","PureComponent","App","selectedUserId","callbacksForCompletedFilter","all","active","event","target","getFiltredTodos","filter","titleInLowerCase","toLowerCase","queryInLowerCase","includes","dotos","catch","err","selectUserId","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6164061e.chunk.js","sourcesContent":["import React from 'react';\nimport ClassNames from 'classnames';\nimport { TodoProps } from '../../props/TodoProps';\n\nexport const Todo = ({ completed, title, userId, changeUserId }) => (\n  <>\n    <label>\n      <input type=\"checkbox\" readOnly checked={completed} />\n      <p>{title}</p>\n    </label>\n\n    <button\n      className={ClassNames('TodoList__user-button', 'button', {\n        'TodoList__user-button--selected': completed,\n      })}\n      type=\"button\"\n      onClick={() => changeUserId(userId)}\n    >\n      User&nbsp;#\n      {userId}\n    </button>\n  </>\n);\n\nTodo.propTypes = TodoProps;\n\nTodo.defaultProps = {\n  userId: 0,\n  completed: false,\n};\n","import PropTypes from 'prop-types';\n\nexport const TodoProps = {\n  completed: PropTypes.bool,\n  title: PropTypes.string.isRequired,\n  userId: PropTypes.number,\n  changeUserId: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nexport const ControllersProps = {\n  selectValue: PropTypes.string.isRequired,\n  filterQuery: PropTypes.string.isRequired,\n  handleChange: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { ControllersProps } from '../../props/ControllersProps';\nimport './Controllers.scss';\n\nexport const Controllers = ({ filterQuery, handleChange, selectValue }) => (\n  <div className=\"Controllers\">\n    <input\n      className=\"Controllers__input\"\n      placeholder=\"Enter todo\"\n      name=\"filterQuery\"\n      value={filterQuery}\n      onChange={handleChange}\n    />\n\n    <select\n      className=\"Controllers__select\"\n      name=\"selectValue\"\n      value={selectValue}\n      onChange={handleChange}\n    >\n      <option value=\"all\">all</option>\n      <option value=\"active\">active</option>\n      <option value=\"completed\">completed</option>\n    </select>\n  </div>\n);\n\nControllers.propTypes = ControllersProps;\n","import React from 'react';\nimport ClassNames from 'classnames';\nimport { Todo } from '../Todo';\nimport { Controllers } from '../Controllers';\nimport './TodoList.scss';\nimport { TodoListProps } from '../../props/TodoListProps';\n\nexport const TodoList = ({\n  todos,\n  filterQuery,\n  handleChange,\n  selectValue,\n  changeUserId,\n}) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n\n    <Controllers\n      className=\"TodoList__controllers\"\n      filterQuery={filterQuery}\n      handleChange={handleChange}\n      selectValue={selectValue}\n    />\n\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.map(({ completed, id, title, userId }) => (\n          <li\n            key={id}\n            className={ClassNames('TodoList__item', {\n              'TodoList__item--checked': completed,\n              'TodoList__item--unchecked': !completed,\n            })}\n          >\n            <Todo\n              completed={completed}\n              title={title}\n              userId={userId}\n              handleChange={handleChange}\n              changeUserId={changeUserId}\n            />\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n\nTodoList.propTypes = TodoListProps;\n","import PropTypes from 'prop-types';\nimport { ControllersProps } from './ControllersProps';\n\nexport const TodoListProps = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      completed: PropTypes.bool,\n      title: PropTypes.string.isRequired,\n      userId: PropTypes.number,\n    }),\n  ),\n  ...ControllersProps,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport function getTodos() {\n  return fetch(`${BASE_URL}/todos`)\n    .then(response => response.json())\n    .then(json => json.data)\n    .then(dotos => dotos.filter(({ id, title }) => id && title));\n}\n\nexport function getUser(id) {\n  return fetch(`${BASE_URL}/users/${id}`)\n    .then(response => response.json())\n    .then(json => json.data);\n}\n","import PropTypes from 'prop-types';\n\nexport const CurrentUserProps = {\n  userId: PropTypes.number.isRequired,\n  resetUserId: PropTypes.func.isRequired,\n};\n","/* eslint-disable no-console */\nimport React from 'react';\nimport { CurrentUserProps } from '../../props/CurrentUserProps';\nimport { getUser } from '../../api';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.PureComponent {\n  state = {\n    user: {},\n  }\n\n  async componentDidMount() {\n    this.changeUser();\n  }\n\n  async componentDidUpdate(prevProps) {\n    const { userId } = this.props;\n\n    if (prevProps.userId === userId) {\n      return;\n    }\n\n    this.changeUser();\n  }\n\n  changeUser = async() => {\n    const { userId } = this.props;\n\n    try {\n      const user = await getUser(userId);\n\n      this.setState({\n        user,\n      });\n    } catch (error) {\n      console.warn(error);\n    }\n  }\n\n  render() {\n    const { userId, resetUserId } = this.props;\n    const { user } = this.state;\n\n    return !user\n      ? <p>User not found</p>\n      : (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              Selected user:\n              {' '}\n              {userId}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">{user.name}</h3>\n          <p className=\"CurrentUser__email\">{user.email}</p>\n          <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n          <button\n            type=\"button\"\n            className=\"CurrentUser__button button\"\n            onClick={resetUserId}\n          >\n            Clear\n          </button>\n        </div>\n      );\n  }\n}\n\nCurrentUser.propTypes = CurrentUserProps;\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    filterQuery: '',\n    selectValue: 'all',\n  };\n\n  callbacksForCompletedFilter = {\n    all: () => true,\n    active: completed => !completed,\n    completed: completed => completed,\n  }\n\n  componentDidMount() {\n    getTodos()\n      .then((todos) => {\n        this.setState({\n          todos,\n        });\n      })\n      // eslint-disable-next-line no-console\n      .catch(err => console.warn(err));\n  }\n\n  changeUserId = (userId) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  resetUserId = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  }\n\n  getFiltredTodos = () => {\n    const { todos, filterQuery, selectValue } = this.state;\n\n    return todos\n      .filter(({ title, completed }) => {\n        const titleInLowerCase = title.toLowerCase();\n        const queryInLowerCase = filterQuery.toLowerCase();\n\n        return titleInLowerCase.includes(queryInLowerCase)\n          && this.callbacksForCompletedFilter[selectValue](completed);\n      });\n  }\n\n  render() {\n    const { selectedUserId, filterQuery, selectValue } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={this.getFiltredTodos()}\n            selectUserId={this.selectUserId}\n            filterQuery={filterQuery}\n            handleChange={this.handleChange}\n            changeUserId={this.changeUserId}\n            selectValue={selectValue}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                resetUserId={this.resetUserId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}